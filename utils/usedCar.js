const fs = require('fs').promises; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const bookings = require('../bookings.json');
let usedCars = require('../used_car.json');
const json = require('../data.json');
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã
async function handleChooseRentalDuration(ctx, index) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–î–µ–Ω—å", callback_data: `day_${index}` }],
        [{ text: "–ù–µ–¥–µ–ª—è", callback_data: `week_${index}` }],
        [{ text: "–ú–µ—Å—è—Ü", callback_data: `month_${index}` }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
      ]
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function handleAddToUsed(ctx, index, userStates, adminChatId, adminAssistantChatId) {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –≤ –¥–Ω—è—Ö –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const rentalDuration = getRentalDuration(ctx.callbackQuery.data);
  if (!rentalDuration) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã.");
    return;
  }

  if (index !== -1) {
    const booking = bookings.splice(index, 1)[0];
    const startUsingDate = new Date().toLocaleString();
    const endUsingDate = new Date(new Date().setDate(new Date().getDate() + rentalDuration.days)).toLocaleString();

    const usedCar = {
      car: booking.car,
      user_used: {
        id: booking.user.id,
        name: booking.user.name,
      },
      admin: {
        id: userId,
        name: ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'
      },
      start_date: startUsingDate,
      end_date: endUsingDate
    };

    usedCars.push(usedCar);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã
    try {
      await fs.writeFile('./bookings.json', JSON.stringify(bookings, null, 2));
      await fs.writeFile('./used_car.json', JSON.stringify(usedCars, null, 2));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
      return;
    }

    await ctx.editMessageText(`üöó –í—ã –¥–∞–ª–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ ${rentalDuration.text}: ${usedCar.car.name}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
        ]
      }
    });

    const userLink = `[${ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}](tg://user?id=${userId})`;
    const messageText = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nüöó ${usedCar.car.name}`;
    if (adminChatId !== ctx.from.id && adminAssistantChatId === ctx.from.id) {
      await ctx.telegram.sendMessage(adminChatId, messageText, { parse_mode: 'Markdown' });
    }
    if (adminChatId === ctx.from.id && adminAssistantChatId !== ctx.from.id) {
      await ctx.telegram.sendMessage(adminAssistantChatId, messageText, { parse_mode: 'Markdown' });
    }

    console.log(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${usedCar.car.name} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userLink} —Å ${startUsingDate} –¥–æ ${endUsingDate}.`);
  } else {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã
function getRentalDuration(callbackData) {
  const parts = callbackData.split('_');
  const durationType = parts[0]; // day, week, month
  switch (durationType) {
    case 'day':
      return { days: 1, text: '1 –¥–µ–Ω—å' };
    case 'week':
      return { days: 7, text: '1 –Ω–µ–¥–µ–ª—è' };
    case 'month':
      return { days: 30, text: '1 –º–µ—Å—è—Ü' };
    default:
      return null;
  }
}

function parseDate(dateString) {
  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const [datePart, timePart] = dateString.split(', ');

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥
  const parts = datePart.split('.');
  const day = parseInt(parts[0], 10);
  const month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
  const year = parseInt(parts[2], 10);

  // –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
  const timeParts = timePart.split(':');
  const hours = parseInt(timeParts[0], 10);
  const minutes = parseInt(timeParts[1], 10);

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date —Å –≥–æ–¥–æ–º, –º–µ—Å—è—Ü–µ–º, –¥–Ω–µ–º, —á–∞—Å–∞–º–∏ –∏ –º–∏–Ω—É—Ç–∞–º–∏
  return new Date(year, month, day, hours, minutes);
}


async function checkExpiredRentals(ctx, adminChatId, adminAssistantChatId) {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Ä–æ–∫–æ–≤ –∞—Ä–µ–Ω–¥—ã –Ω–∞—á–∞—Ç–∞...");

  const currentDate = new Date();
  const carsToRemove = [];

  for (const usedCar of usedCars) {
    const endDate = parseDate(usedCar.end_date);
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${usedCar.car.name}, —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ: ${endDate}`);

    if (endDate < currentDate) {
      const messageText = `‚ö†Ô∏è –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è "${usedCar.car.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1')}" –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${usedCar.user_used.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1')}.`;

      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageText}`); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      try {
        await ctx.telegram.sendMessage(adminChatId, messageText, { parse_mode: 'Markdown' });
        await ctx.telegram.sendMessage(adminAssistantChatId, messageText, { parse_mode: 'Markdown' });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }

      carsToRemove.push(usedCar.car);
    }
  }
  for (const carToRemove of carsToRemove) {
    const index = usedCars.findIndex(car => car.car.name === carToRemove.name);
    if (index !== -1) {
      usedCars.splice(index, 1);
    }
  }
  await fs.writeFile('./used_car.json', JSON.stringify(usedCars, null, 2));
  if (carsToRemove.length > 0) {
    const updatedCars = json.concat(carsToRemove);
    await fs.writeFile('./data.json', JSON.stringify(updatedCars, null, 2));
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data.json");
  } else {
    console.log("–ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
  }
}



module.exports = {
  handleChooseRentalDuration,
  handleAddToUsed,
  checkExpiredRentals
};
