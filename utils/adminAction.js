const fs = require('fs');
let json = require('../data.json');
let bookings = require('../bookings.json');
const { Markup } = require('telegraf');

async function viewBookings(ctx) {
  if (bookings.length === 0) {
    await ctx.editMessageText("üì≠ *–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.*", {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
      }
    });
  } else {
    const bookingInfo = bookings.map((booking, index) => [
      { text: `#${index + 1} ${booking.car.name} üóíÔ∏è`, callback_data: `booking_info_${index}` },
      { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_booking_${index}` }
    ]);

    await ctx.editMessageText("üìú *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:*", {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          ...bookingInfo,
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
      }
    });
  }
}

async function handleManageCars(ctx) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'add_car' }],
        [{ text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'delete_car' }],
        [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ", callback_data: 'find_car_to_edit' }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
      ]
    }
  });
}

async function handleAddCar(ctx, userStates) {
  await ctx.answerCbQuery();
  userStates[ctx.from.id] = 'adding_car';
  await ctx.editMessageText("üì• *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
}

async function handleDeleteCar(ctx, userStates) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
  userStates[ctx.from.id] = 'delete_car';
}

async function handleFindCarToEdit(ctx, userStates) {
  await ctx.answerCbQuery();
  userStates[ctx.from.id] = { state: 'finding_car' };
  await ctx.editMessageText("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:*",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
}

async function handleDeleteBooking(ctx, index) {
  console.log("Deleting booking at index:", index, "Bookings length:", bookings.length); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
  if (index >= 0 && index < bookings.length) {
    const removedBooking = bookings.splice(index, 1)[0];
    json.push(removedBooking.car);

    fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));
    fs.writeFileSync('./bookings.json', JSON.stringify(bookings, null, 2));
    await ctx.answerCbQuery(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${removedBooking.car.name} —É–¥–∞–ª–µ–Ω–æ.`);
  } else {
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
  }

  await ctx.editMessageReplyMarkup({
    inline_keyboard: [
      ...bookings.map((booking, idx) => [
        { text: `#${idx + 1} ${booking.car.name} üóíÔ∏è`, callback_data: `booking_info_${idx}` },
        { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_booking_${idx}` }
      ]),
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
    ]
  });
}

async function handleBookingInfo(ctx, index) {
  console.log("Viewing booking info at index:", index, "Bookings length:", bookings.length); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
  if (index >= 0 && index < bookings.length) {
    const booking = bookings[index];
    const userLink = `[${booking.user.name}](tg://user?id=${booking.user.id})`;
    const carName = booking.car.name;
    const { date } = booking;

    await ctx.editMessageText(
      `üìÑ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userLink}\nüöó –ê–≤—Ç–æ: ${carName}\nüìÖ –î–∞—Ç–∞: ${date}`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
          ]
        }
      }
    );
  } else {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
  }
}

async function listCarForAdmin(ctx){
  let list = 'üìÑ **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ**\n\n';
  json.map((car,idx) => {
    list += `${idx+1} ${car.name}\n`;
  })
  ctx.editMessageText(list,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
      }
    });
}

module.exports = {
  handleManageCars,
  handleDeleteCar,
  handleAddCar,
  viewBookings,
  handleFindCarToEdit,
  handleBookingInfo,
  handleDeleteBooking,
  listCarForAdmin
};
