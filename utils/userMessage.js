const { Markup, Telegraf } = require('telegraf');
const fs = require('fs');
const { sendCarData, filterByPrice } = require('./carFunctions.js');

let filteredCars = [];
const adminChatId = process.env.ADMIN_ID;
const adminAssistantChatId = process.env.ADMIN_ASSISTANT;

function getFilteredCars() {
  return filteredCars;
}

async function handleMessage(ctx, json, userStates, stateFiltr, userCarIndex) {
  if (ctx.message.photo || ctx.message.sticker || ctx.message.animation) {
    await ctx.reply("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    try {
      await ctx.deleteMessage();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
    return;
  }

  const userId = ctx.from.id;
  const state = userStates[userId];

  switch (state?.state || state) {
    case 'adding_car': {
      const data = ctx.message.text.split('|').map(part => part.trim());

      if (data.length === 5) {
        const [name, stage, prices, zalog, img] = data;
        const priceParts = prices.split('/');

        if (priceParts.length === 3 && priceParts.every(price => !isNaN(price))) {
          const newCar = {
            name,
            stage,
            price_day: priceParts[0],
            price_week: priceParts[1],
            price_month: priceParts[2],
            zalog,
            img: [img]
          };

          json.push(newCar);
          await fs.promises.writeFile('./data.json', JSON.stringify(json, null, 2));
          await ctx.reply(
            "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')])
          );
          const userName = ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
          const userLink = `[${userName}](tg://user?id=${userId})`;
          const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${newCar.name}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${newCar.stage}\nüí∞ *–¶–µ–Ω–∞*: ${newCar.price_day} –¥–µ–Ω—å / ${newCar.price_week} –Ω–µ–¥–µ–ª—è / ${newCar.price_month} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${newCar.zalog}\n`;
          if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
            await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
          }
          if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
            await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
          }
          delete userStates[userId];
        } else {
          await ctx.reply("üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!* \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n*—Ü–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å / —Ü–µ–Ω–∞ –∑–∞ –Ω–µ–¥–µ–ª—é / —Ü–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü*\n\n–ü—Ä–∏–º–µ—Ä: `1000/6000/20000`");
        }
      } else {
        await ctx.reply(
          "üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!* \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n`–∏–º—è|—Å—Ç–∞–¥–∏—è|—Ü–µ–Ω–∞_–∑–∞_–¥–µ–Ω—å/—Ü–µ–Ω–∞_–∑–∞_–Ω–µ–¥–µ–ª—é/—Ü–µ–Ω–∞_–∑–∞_–º–µ—Å—è—Ü|–∑–∞–ª–æ–≥|—Å—Å—ã–ª–∫–∞_–Ω–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`\n\n–ü—Ä–∏–º–µ—Ä:\n`Toyota Camry|2020|1000/6000/20000|5000|Toyota_Camry.png`"
        );
      }
      break;
    }

    case 'finding_car': {
      const carName = ctx.message.text.trim();
      const car = json.find(car => car.name.toLowerCase() === carName.toLowerCase());

      if (car) {
        userStates[userId] = { state: 'editing_car', car };
        await ctx.reply("‚úÖ *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω.*\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`", { parse_mode: 'Markdown' });
      } else {
        await ctx.reply("‚ùå *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*");
      }
      break;
    }

    case 'editing_car': {
      const car = state.car;
      const data = ctx.message.text.split('|').map(part => part.trim());

      if (data.length === 5) {
        car.name = data[0];
        car.stage = data[1];
        const prices = data[2].split('/');
        car.price_day = prices[0].trim();
        car.price_week = prices[1].trim();
        car.price_month = prices[2].trim();
        car.zalog = data[3];
        car.img[0] = data[4];

        await fs.promises.writeFile('./data.json', JSON.stringify(json, null, 2));
        await ctx.reply("‚úÖ *–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*", Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')]));


        const userLink = `[${ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}](tg://user?id=${userId})`;
        const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\nüí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`;
        if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
          await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n${carData}`, { parse_mode: 'Markdown' });
        }
        if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
          await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n${carData}`, { parse_mode: 'Markdown' });
        }
        delete userStates[userId];
      } else {
        await ctx.reply("üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!*");
      }
      break;
    }

    case 'delete_car': {
      const carName = ctx.message.text.trim();
      const carIndex = json.findIndex(car => car.name.toLowerCase() === carName.toLowerCase());

      if (carIndex !== -1) {
        const userLink = `[${ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}](tg://user?id=${userId})`;
        const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${json[carIndex].name}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${json[carIndex].stage}\nüí∞ *–¶–µ–Ω–∞*: ${json[carIndex].price_day} –¥–µ–Ω—å / ${json[carIndex].price_week} –Ω–µ–¥–µ–ª—è / ${json[carIndex].price_month} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${json[carIndex].zalog}\n`;
        if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
          await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} —É–¥–∞–ª–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
        }
        if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
          await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} —É–¥–∞–ª–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
        }
        json.splice(carIndex, 1);
        fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));

        await ctx.reply(`‚úÖ *–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.*`, Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')]));
      } else {
        await ctx.reply("‚ùå *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')]));
      }
      delete userStates[userId];
      break;
    }

    default: {
      if (ctx.message.text === 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        stateFiltr = false;
        await ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']]).resize());
      } else if (stateFiltr) {
        const filterInput = ctx.message.text.trim();
        let [nameFilter = '', priceRange = ''] = filterInput.includes(',') ? filterInput.split(',').map(item => item.trim().toLowerCase()) : [filterInput.toLowerCase(), ''];
        let rentPeriod = priceRange.includes('/') ? priceRange.split('/')[1].trim() : '–¥–µ–Ω—å';
        const [from = 0, to = Infinity] = priceRange.includes('-') ? priceRange.split('-').map(p => parseInt(p.trim(), 10)) : [0, Infinity];

        filteredCars = json.filter(car => car.name.toLowerCase().includes(nameFilter) && filterByPrice(car, from, to, rentPeriod));

        if (filteredCars.length > 0) {
          userCarIndex[ctx.from.id] = 0;
          await sendCarData(ctx, userCarIndex[ctx.from.id], filteredCars);
        } else {
          await ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.', Markup.inlineKeyboard([Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]));
        }
      } else {
        await ctx.reply('‚ùì –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..', Markup.keyboard([['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']]).resize());
      }
      break;
    }
  }
}

module.exports = {
  handleMessage,
  getFilteredCars
};
