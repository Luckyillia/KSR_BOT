const { Markup } = require('telegraf');
const { editCar, editFilteredCar } = require('./carFunctions');

async function handleNextCar(ctx, json, userCarIndex) {
  const userId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  if (json.length === 0) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.");
    return;
  }

  userCarIndex[userId] = (userCarIndex[userId] + 1) % json.length;

  await ctx.answerCbQuery();
  await editCar(ctx, userCarIndex[userId]);
}

async function handlePrevCar(ctx, json, userCarIndex) {
  const userId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  if (json.length === 0) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.");
    return;
  }

  userCarIndex[userId] = (userCarIndex[userId] - 1 + json.length) % json.length;

  await ctx.answerCbQuery();
  await editCar(ctx, userCarIndex[userId]);
}

async function handleNextFilteredCar(ctx, userModule, userCarIndex) {
  const userId = ctx.from.id;
  const filteredCars = userModule.getFilteredCars();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  if (filteredCars.length === 0) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
    return;
  }

  userCarIndex[userId] = (userCarIndex[userId] + 1) % filteredCars.length;
  await ctx.answerCbQuery();
  await editFilteredCar(ctx, userCarIndex[userId], filteredCars);
}

async function handlePrevFilteredCar(ctx, userModule, userCarIndex) {
  const userId = ctx.from.id;
  const filteredCars = userModule.getFilteredCars();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  if (filteredCars.length === 0) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
    return;
  }

  userCarIndex[userId] = (userCarIndex[userId] - 1 + filteredCars.length) % filteredCars.length;
  await ctx.answerCbQuery();
  await editFilteredCar(ctx, userCarIndex[userId], filteredCars);
}

async function handleGoToMain(ctx) {
  await ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
    ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
  ]).resize());
  await ctx.deleteMessage();
}

async function handleBackToAdmin(ctx) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("üìã *–°–ø–∏—Å–æ–∫ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –§—É–Ω–∫—Ü–∏–π*", {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ", callback_data: 'view_bookings' }],
        [{ text: "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }],
        [{ text: "‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data: 'go_to_main' }]
      ]
    }
  });
}

module.exports = {
  handleNextCar,
  handlePrevCar,
  handleNextFilteredCar,
  handlePrevFilteredCar,
  handleGoToMain,
  handleBackToAdmin
};
