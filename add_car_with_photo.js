const { Markup } = require('telegraf');
const json = require('./data.json');
const { filterByPrice, sendCarData, downloadImage } = require('./utils/carFunctions');
const userCarImages = {};

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates[userId];

  if (state === 'adding_car') {
    const data = ctx.message.text.split('|').map(part => part.trim());
    if (data.length === 5) {
      const [name, stage, prices, zalog] = data;
      const priceParts = prices.split('/');

      if (priceParts.length === 3 && priceParts.every(price => !isNaN(price))) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ userStates –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        userStates[userId] = {
          ...userStates[userId],
          carData: { name, stage, price_day: priceParts[0], price_week: priceParts[1], price_month: priceParts[2], zalog }
        };
        await ctx.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
      } else {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—ã.");
      }
    } else {
      await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
    }
  } else {
    if (ctx.message.text === 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      stateFiltr = false;

      return ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
        ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
      ]).resize());
    }

    if (stateFiltr) {
      const filterInput = ctx.message.text.trim();
      let nameFilter = '';
      let priceRange = '';
      let rentPeriod = '–¥–µ–Ω—å';

      if (filterInput.includes(',')) {
        const parts = filterInput.split(',').map(item => item.trim().toLowerCase());
        nameFilter = parts[0];
        priceRange = parts[1];
      } else if (filterInput.includes('/')) {
        priceRange = filterInput.toLowerCase();
      } else {
        nameFilter = filterInput.toLowerCase();
      }

      if (priceRange.includes('/')) {
        const [price, period] = priceRange.split('/');
        rentPeriod = period.trim();

        let priceFrom = 0;
        let priceTo = Infinity;

        const [from, to] = price.split('-').map(price => parseInt(price.trim(), 10));
        priceFrom = isNaN(from) ? 0 : from;
        priceTo = isNaN(to) ? Infinity : to;

        filteredCars = json.filter(car => {
          const nameMatches = nameFilter ? car.name.toLowerCase().includes(nameFilter) : true;
          return nameMatches && filterByPrice(car, priceFrom, priceTo, rentPeriod);
        });

        if (filteredCars.length > 0) {
          userCarIndex[ctx.from.id] = 0;
          await sendCarData(ctx, userCarIndex[ctx.from.id],filteredCars);
        } else {
          ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.');
        }
      } else {
        filteredCars = json.filter(car => car.name.toLowerCase().includes(nameFilter));

        if (filteredCars.length > 0) {
          userCarIndex[ctx.from.id] = 0;
          await sendCarData(ctx, userCarIndex[ctx.from.id],filteredCars);
        } else {
          ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.',
            Markup.inlineKeyboard([
              Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')
            ])
          );
        }
      }
    } else {
      ctx.reply('–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..', Markup.keyboard([
        ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
      ]).resize());
    }
  }
});

bot.on('photo', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates[userId];

  if (state && state.carData) {
    const photo = ctx.message.photo.pop(); // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const fileId = photo.file_id;
    const imgDir = './img';

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ Telegram API
      const link = await ctx.telegram.getFileLink(fileId);
      const imgPath = path.join(imgDir, `${fileId}.jpg`);
      await downloadImage(link, imgPath);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ userCarImages –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –¥–∞–Ω–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è
      userCarImages[userId] = imgPath;
      userStates[userId].carData.img = [imgPath];

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ json
      json.push(userStates[userId].carData);
      await fs.promises.writeFile('./data.json', JSON.stringify(json, null, 2));

      await ctx.reply(
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        Markup.inlineKeyboard([Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')])
      );

      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      delete userStates[userId];
      delete userCarImages[userId];
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  } else {
    ctx.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
  }
});

async function downloadImage(url, filepath) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);
  await fs.promises.mkdir(path.dirname(filepath), { recursive: true });
  await fs.promises.writeFile(filepath, buffer);
}