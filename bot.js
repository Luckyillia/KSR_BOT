const { Telegraf, Markup } = require('telegraf');
const path = require('path');
const json = require('./data.json');
const fs = require('fs');

let stateFiltr = false;
const adminChatId = process.env.ADMIN_ID;
const admin_assistantChatId = process.env.ADMIN_ASSISTANT;

let bookings = [];
let filteredCars = [];
const adminIds = [adminChatId, admin_assistantChatId];

const userCarIndex = {};
const userStates = {};

const bot = new Telegraf(process.env.BOT_TOKEN);

function readBookingsFromFile() {
    const filePath = path.join(__dirname, 'bookings.json');
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
            return;
        }
        try {
            bookings = JSON.parse(data);
        } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
        }
    });
}

readBookingsFromFile();

bot.start(async (ctx) => {
    await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. üöó\n\n' +
        '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n' +
        '- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.\n' +
        '- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ.\n' +
        '- –£–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –∫–∞–∂–¥–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.\n\n' +
        '–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:',
        Markup.keyboard([
            ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
        ]).resize()
    );
});


bot.hears('üöó –í—Å–µ –ê–≤—Ç–æ', async (ctx) => {
    const userId = ctx.from.id;
    userCarIndex[userId] = 0; 
    filteredCars = json; 
    console.log(ctx.from.id);
    await ctx.reply('–ó–¥–µ—Å—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:', Markup.removeKeyboard());

    await sendCar(ctx, userCarIndex[userId]);
});

bot.action('next_car', async (ctx) => {
    const userId = ctx.from.id;
    userCarIndex[userId] = (userCarIndex[userId] + 1) % json.length;

    await ctx.answerCbQuery();
    await editCar(ctx, userCarIndex[userId]);
});

bot.action('prev_car', async (ctx) => {
    const userId = ctx.from.id;
    userCarIndex[userId] = (userCarIndex[userId] - 1 + json.length) % json.length;

    await ctx.answerCbQuery();
    await editCar(ctx, userCarIndex[userId]);
});

async function sendCar(ctx, index) {
    const car = json[index];
    const carData = 
        `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\n` +
        `üõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\n` +
        `üí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\n` +
        `üîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`;

    const imagePath = path.join(__dirname, 'img', car.img[0]);

    try {
        await ctx.replyWithPhoto(
            { source: imagePath },
            {
                caption: carData,
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_car'), 
                     Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'), 
                     Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_car')],
                    [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
                ])
            }
        );
    } catch (error) {
        console.error("Error sending image or message:", error);
        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
    }
}

async function editCar(ctx, index) {
    const car = json[index];
    const carData = 
        `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\n` +
        `üõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\n` +
        `üí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\n` +
        `üîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`;

    const imagePath = path.join(__dirname, 'img', car.img[0]);

    try {
        await ctx.editMessageMedia(
            {
                type: 'photo',
                media: { source: imagePath },
                caption: carData,
                parse_mode: 'Markdown'
            },
            Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_car'), 
                 Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'), 
                 Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_car')],
                [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
            ])
        );
    } catch (error) {
        console.error("Error editing image or caption:", error);
        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
    }
}

bot.action('book_car', async (ctx) => {
    await ctx.answerCbQuery('–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –∞–≤—Ç–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è');

    await ctx.editMessageCaption('–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –∞–≤—Ç–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è', {
        parse_mode: 'Markdown',
    });

    ctx.reply("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", Markup.inlineKeyboard([
        Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')
    ]));

    const userId = ctx.from.id;
    const userName = ctx.from.username ? ctx.from.username : '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userLink = `[${userName}](tg://user?id=${userId})`;

    const carCaption = ctx.callbackQuery.message.caption;

    const carIndex = json.findIndex(car => 
        carCaption.includes(car.name)
    );

    if (carIndex !== -1) {
        const bookedCar = json.splice(carIndex, 1)[0]; 
        const bookingDate = new Date().toLocaleString();
        bookings.push({
            car: bookedCar,
            user: { id: userId, name: userName },
            date: bookingDate
        });
        fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));
        fs.writeFileSync('./bookings.json', JSON.stringify(bookings, null, 2));
        console.log(bookings);
    }

    await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carCaption}`, {
        parse_mode: 'Markdown' 
    });
    await ctx.telegram.sendMessage(admin_assistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carCaption}`, {
        parse_mode: 'Markdown' 
    });
});


bot.hears('üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ', async (ctx) => {
    await ctx.reply("üîç **–§–∏–ª—å—Ç—Ä –∞–≤—Ç–æ**", Markup.removeKeyboard());
    const filtr =  "üìã **–ü—Ä–∏–º–µ—Ä—ã**\n\n" +
              "üî§ –¢–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–∏–º–µ—Ä: (BMW)\n\n" +
              "üí∞ –¢–æ–ª—å–∫–æ –ø–æ —Ü–µ–Ω–µ –æ—Ç-–¥–æ –∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø—Ä–∏–º–µ—Ä: (0-12.000 / (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü))\n\n" +
              "üîó –ò –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ —Ü–µ–Ω–µ –ø—Ä–∏–º–µ—Ä: (BMW, 0-12.000 / (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü))\n\n" +
              "‚ÄºÔ∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*: –¢—ã—Å—è—á–∏ –æ—Ç–¥–µ–ª—è—é—Ç—Å—è —Ç–æ—á–∫–æ–π.\n\n"+
              "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ñ–∏–ª—å—Ç—Ä.";
    ctx.reply(filtr, Markup.inlineKeyboard([
        Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')
    ]));
    stateFiltr = true;
});

async function sendCarData(ctx, index) {
    if (filteredCars.length === 0) {
        ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
        return;
    }

    const car = filteredCars[index];
    const carData = 
        `üöó **–ù–∞–∑–≤–∞–Ω–∏–µ**: ${car.name}\n` +
        `üõ†Ô∏è **–°—Ç–µ–π–¥–∂–∏**: ${car.stage}\n` +
        `üí∞ **–¶–µ–Ω–∞**: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\n` +
        `üîë **–ó–∞–ª–æ–≥**: ${car.zalog}\n`;

    const imagePath = path.join(__dirname, 'img', car.img[0]);

    try {
        await ctx.replyWithPhoto(
            { source: imagePath },
            {
                caption: carData,
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_filtered_car'), 
                    Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
                    Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_filtered_car')],
                    [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
                ])
            }
        );
    } catch (error) {
        console.error("Error sending image or message:", error);
        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
    }
    stateFiltr = false;
}

function filterByPrice(car, priceFrom, priceTo, rentPeriod) {
    let carPrice = 0;

    switch (rentPeriod) {
        case '–¥–µ–Ω—å':
            carPrice = parseInt(car.price_day);
            break;
        case '–Ω–µ–¥–µ–ª—è':
            carPrice = parseInt(car.price_week);
            break;
        case '–º–µ—Å—è—Ü':
            carPrice = parseInt(car.price_month);
            break;
        default:
            return false;
    }

    return carPrice >= priceFrom && carPrice <= priceTo;
}

bot.action('next_filtered_car', async (ctx) => {
    const userId = ctx.from.id;

    if (filteredCars.length === 0) {
        ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
        return;
    }

    userCarIndex[userId] = (userCarIndex[userId] + 1) % filteredCars.length;
    await ctx.answerCbQuery();
    await editFilteredCar(ctx, userCarIndex[userId]);
});

bot.action('prev_filtered_car', async (ctx) => {
    const userId = ctx.from.id;

    if (filteredCars.length === 0) {
        ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
        return;
    }

    userCarIndex[userId] = (userCarIndex[userId] - 1 + filteredCars.length) % filteredCars.length;
    await ctx.answerCbQuery();
    await editFilteredCar(ctx, userCarIndex[userId]);
});

async function editFilteredCar(ctx, index) {
    const car = filteredCars[index];
    const carData = 
        `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\n` +
        `üõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\n` +
        `üí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\n` +
        `üîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`;

    const imagePath = path.join(__dirname, 'img', car.img[0]);

    try {
        await ctx.editMessageMedia(
            {
                type: 'photo',
                media: { source: imagePath },
                caption: carData,
                parse_mode: 'Markdown'
            },
            Markup.inlineKeyboard([
                [Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_filtered_car'), 
                Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
                Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_filtered_car')],
                [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
            ])
        );
    } catch (error) {
        console.error("Error editing image or caption:", error);
        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
    }
}

bot.action('go_to_main', (ctx) => {
    ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
        ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
    ]).resize());
});


// –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.command('admin', async (ctx) => {
    if(adminChatId != ctx.from.id){
        return ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.");
    }
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",Markup.removeKeyboard());
    await ctx.reply("–°–ø–∏—Å–æ–∫ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –§—É–Ω–∫—Ü–∏–π", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ", callback_data: 'view_bookings' }],
                [{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }],
                [{ text: "–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data: 'update_filters' }],
                [{ text: "–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data: 'go_to_main' }]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ
bot.action('view_bookings', async (ctx) => {
    await ctx.answerCbQuery();
    
    if (bookings.length === 0) {
        await ctx.reply("–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.", {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
                ]
            }
        });
    } else {
        const bookingInfo = bookings.map((booking, index) => {
            const userLink = `[${booking.user.name}](tg://user?id=${booking.user.id})`;
            return [
                { text: `#${index + 1} ${booking.car.name}`, callback_data: `booking_info_${index}` },
                { text: "–£–¥–∞–ª–∏—Ç—å", callback_data: `delete_booking_${index}` }
            ];
        });

        await ctx.reply("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:", {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    ...bookingInfo, // –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
                    [{ text: "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
                ]
            }
        });
    }
});

bot.action(/delete_booking_(\d+)/, async (ctx) => {
    const index = parseInt(ctx.match[1]); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if (index >= 0 && index < bookings.length) {
        const removedBooking = bookings.splice(index, 1)[0]; 

        json.push(removedBooking.car);

        fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));
        fs.writeFileSync('./bookings.json', JSON.stringify(bookings, null, 2));
        await ctx.answerCbQuery(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${removedBooking.car.name} —É–¥–∞–ª–µ–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.`);
    } else {
        await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await ctx.editMessageReplyMarkup({
        inline_keyboard: [
            ...bookings.map((booking, index) => [
                { text: `#${index + 1} ${booking.car.name}`, callback_data: `booking_info_${index}` },
                { text: "–£–¥–∞–ª–∏—Ç—å", callback_data: `delete_booking_${index}` }
            ]),
            [{ text: "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
    });
});

bot.action(/booking_info_(\d+)/, async (ctx) => {
    const index = parseInt(ctx.match[1]); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ callback_data
    if (index >= 0 && index < bookings.length) {
        const booking = bookings[index];
        const userLink = `[${booking.user.name}](tg://user?id=${booking.user.id})`;
        const carName = booking.car.name;
        const date = booking.date;

        await ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n` +
                        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userLink}\n` +
                        `–ê–≤—Ç–æ: ${carName}\n` +
                        `–î–∞—Ç–∞: ${date}`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
                ]
            }
        });
    } else {
        await ctx.reply("–û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }
});


bot.action('manage_cars', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'add_car' }],
                [{ text: "–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'delete_car' }],
                [{ text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ", callback_data: 'edit_car' }],
                [{ text: "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
            ]
        }
    });
});

bot.action('add_car', async (ctx) => {
    await ctx.answerCbQuery();
    userStates[ctx.from.id] = 'adding_car'; 
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
});

bot.action('delete_car', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:");
    bot.on('text', async (ctx) => {
        const carName = ctx.message.text.trim();
        const carIndex = json.findIndex(car => car.name.toLowerCase() === carName.toLowerCase());
        if (carIndex !== -1) {
            json.splice(carIndex, 1);
            fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));
            await ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        } else {
            await ctx.reply("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
bot.action('edit_car', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:");
    bot.on('text', async (ctx) => {
        const carName = ctx.message.text.trim();
        const car = json.find(car => car.name.toLowerCase() === carName.toLowerCase());
        if (car) {
            await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${carName} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
            bot.on('text', async (ctx) => {
                const data = ctx.message.text.split('|').map(part => part.trim());
                if (data.length === 5) {
                    car.name = data[0];
                    car.stage = data[1];
                    car.price_day = data[2].split('/')[0].trim();
                    car.price_week = data[2].split('/')[1].trim();
                    car.price_month = data[2].split('/')[2].trim();
                    car.zalog = data[3];
                    car.img[0] = data[4];
                    fs.writeFileSync('./data.json', JSON.stringify(json, null, 2));
                    await ctx.reply("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
                } else {
                    await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.");
                }
            });
        } else {
            await ctx.reply("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
bot.action('update_filters', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ | –ü–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü)");
    bot.on('text', async (ctx) => {
        const filterInput = ctx.message.text.trim();
        const [priceRange, period] = filterInput.split('|').map(part => part.trim());
        const [minPrice, maxPrice] = priceRange.split('-').map(price => parseInt(price.trim(), 10));
        const rentPeriod = period ? period.trim().toLowerCase() : '–¥–µ–Ω—å';

        if (!isNaN(minPrice) && !isNaN(maxPrice) && rentPeriod) {
            // –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω
            filteredCars = json.filter(car => filterByPrice(car, minPrice, maxPrice, rentPeriod));
            await ctx.reply("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
        } else {
            await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.");
        }
    });
});

// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.action('back_to_admin', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.editMessageText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ", callback_data: 'view_bookings' }],
                [{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }],
                [{ text: "–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data: 'update_filters' }],
                [{ text: "–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data: 'go_to_main' }]
            ]
        }
    });
});


bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates[userId];

    if (state === 'adding_car') {
        const data = ctx.message.text.split('|').map(part => part.trim());
        if (data.length === 5) {
            const [name, stage, prices, zalog, img] = data;
            const priceParts = prices.split('/');
            if (priceParts.length === 3 && priceParts.every(price => !isNaN(price))) {
                const newCar = {
                    name,
                    stage,
                    price_day: priceParts[0],
                    price_week: priceParts[1],
                    price_month: priceParts[2],
                    zalog,
                    img: [img]
                };
                json.push(newCar);
                await fs.promises.writeFile('./data.json', JSON.stringify(json, null, 2));
                await ctx.reply(
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    Markup.inlineKeyboard([
                      Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')
                    ])
                  );
                  
                delete userStates[userId];
            } else {
                await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—ã.");
            }
        } else {
            await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
        }
    } else {
        if (ctx.message.text === 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            stateFiltr = false;

            return ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
                ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
            ]).resize());
        }

        if (stateFiltr) {
            const filterInput = ctx.message.text.trim();
            let nameFilter = '';
            let priceRange = '';
            let rentPeriod = '–¥–µ–Ω—å';

            if (filterInput.includes(',')) {
                const parts = filterInput.split(',').map(item => item.trim().toLowerCase());
                nameFilter = parts[0];
                priceRange = parts[1];
            } else if (filterInput.includes('/')) {
                priceRange = filterInput.toLowerCase();
            } else {
                nameFilter = filterInput.toLowerCase();
            }

            if (priceRange.includes('/')) {
                const [price, period] = priceRange.split('/');
                rentPeriod = period.trim();

                let priceFrom = 0;
                let priceTo = Infinity;

                const [from, to] = price.split('-').map(price => parseInt(price.trim(), 10));
                priceFrom = isNaN(from) ? 0 : from;
                priceTo = isNaN(to) ? Infinity : to;

                filteredCars = json.filter(car => {
                    const nameMatches = nameFilter ? car.name.toLowerCase().includes(nameFilter) : true;
                    return nameMatches && filterByPrice(car, priceFrom, priceTo, rentPeriod);
                });

                if (filteredCars.length > 0) {
                    userCarIndex[ctx.from.id] = 0;
                    await sendCarData(ctx, userCarIndex[ctx.from.id]);
                } else {
                    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.');
                }
            } else {
                filteredCars = json.filter(car => car.name.toLowerCase().includes(nameFilter));

                if (filteredCars.length > 0) {
                    userCarIndex[ctx.from.id] = 0;
                    await sendCarData(ctx, userCarIndex[ctx.from.id]);
                } else {
                    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.');
                }
            }
        } else {
            ctx.reply('–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..', Markup.keyboard([
                ['üöó –í—Å–µ –ê–≤—Ç–æ', 'üîç –§–∏–ª—å—Ç—Ä –ê–≤—Ç–æ']
            ]).resize());
        }
    }
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));